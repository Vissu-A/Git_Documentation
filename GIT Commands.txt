-----------------------------------------------------------------------------------------------------------------------------------------------------------
|		COMMAND				|							DESCRIPTION
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git --version				|	to see the git version which is installed on your computer.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git help					|	to see the list of git commands and description of how to use those commands.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git --man-path				|	this will gives the git command's manual/documentaion files path which are stored/installed when we install git on the computer.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git config --list(-l)			|	to see all your git configuration details
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git config --global user.name <"name">	|	to configure/set your github account username in git bash global variables.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git config --global user.email <"email">|	to configure/set your github account email in git bash global variables.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git config --global --get user.name	|	to get/see the value of global variable. to check what is the value has been set for a global variable.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git config --global --get user.email	|	to get/see the value of global variable. to check what is the value has been set for a global variable.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git config --global --list			|	to see all the global variable value/configurations
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git config --global --unset user.name	|	to remove/unset the value of a global variable.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git config --global --unset --all		|	to remove/unset the values of all global variable configurations.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git init					|	Making a normal folder/directory as git repository, we need to execute this command in the folder/directory path which we want to make it as git repo. This will create a folder with name ".git" inside the directory.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git clone <repo url>			|	Cloning the existing remote repositoty from github to local memory.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git status					|	used to show changes done in the Working Directory/local repository.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git add <file_name>			|	to add the file changes/modifications to staging/index area.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git add . / git add *			|	this will add the files which are modified or added newly to staging. this will not add the file deletion changes to staging/index. this will not consider the file deletion.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git add -u					|	this will add the files which are modified or deleted to statging. this will not add the newly created files to staging. this will not consider new file creations.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git add --all / git add -A		|	this will add all kind of changes to staging.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git add *.txt				|	to add all the files are of type TEXT files.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git add sale*				|	to add all the files which are starting with sale.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git ls-files -s / --stage		|	to see the files that are added to staging index.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git restore --staged <file_name>	|	to remove the file from staging index area. the file will again become untraced file.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git checkout <file_name>		|	to remove the files from working directory which are untracked, this only remove files which are modified but not the files whicih are newly created.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git commit -m "commit msg"		|	to commit the changes, commit message will be saved in the path ./.git/COMMIT_EDITMSG file
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git push origin <branch name>		|	to push the commited changes to remote repository branch from local repository branch.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git push -f origin <branch name>	|	to force push the changes.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| 	git branch/ git branch -a		|	gives the list of branches and highlit the branch which your currently working with star(*) symbol before branch name.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git branch <branch_name>		|	this will create a branch with the given name.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git checkout <branch_name>		|	to change the branch from current working branch to given branch
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git checkout -b <branch_name>		|	this will create the branch with given name and change to the newly created branch from current working branch.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git branch -d <branch_name>		|	to delete the branch from local repository, When can't delete the branch if we are working currently in that branch. change to other branch first then delete the branch
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git branch	-D <branch_name>		|	to force delete the branch from local repository
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git push --delete origin <branch_name>	|	to delete the branch from remote repository, we can run this command from any branch.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git merge <branch_name>			|	this will merge the given branch changes into our current working branch.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git log / git log --all			|	this will gives the list/history of all commits that we made till now in local repository.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git log origin/main			|	this will gives the list/history of all commits that we made till now in remote repository.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git log --oneline				|	this will gives the all commit history in one line format/short format.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git log -n					|	to see n number of latest commits, ex: git log -5
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git log --author <name>			|	to see the commits which are made by the give author/user.
| git log --commiter <name>			|
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git log --before <date>			|	filter commits based on dates.
| git log --after <date>			|
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git log --after <date> --before <date>	|     filter commits between date range.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git log --since <date>			|     show all commits made from the given date. ex: git log --since 2022-01-17
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git log --until <date>			|	show all commits made till given date.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git log --grep="word/msg"			|	show all commits that have the given word/msg in the commit msg
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git log <file_name>				|     show all commits that contains the given file in the commit changes.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git log -p					|     to see in depth of all the change deatils made for each and every commit.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git log --stat					|     to see a breaf summary of the changes made for each commit
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git show <commit_id>				|	to see the complete information of a particular commit
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git log --graph					|	to see all the commits in a tree graph format
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| git log --pretty=format:"wanted format" |	to display the git log output is customized format, ex: git log --pretty=format:"Commit Hash: %H, Author: %aN, Date: %aD"
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git diff					|	to display the new change differences made in the files which are unstaged. this will shows only unstaged change differences by default.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git diff --staged				|	to display the new change differences made in the files which are staged.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git diff <file_name>			|	to disaply the change differences for a particular file which is unstaged.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git diff --staged <file_name>		|	to disaply the change differences for a particular file which is staged.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
|	git reset <commit-id>			|	to rollback the commit changes.every time we make a commit Head Pointer will be moved to latest commit from previous commit.
|							|	if you have commits like c1,c2,c3,c4 and we want to rollback C3 commit changes. we have to move the Head pointer to the commit which is before C3.
|							|	"git reset c2". here the problem is, this will not only remove the C3 changes but also removes all changes 
|							|	made after C3 like C4 etc as well.
------------------------------------------------------------------------------------------------------------------------------------------------------------
|	git revert <commit-id>			|	to rollback the commit changes. when we apply revert command this will create a new commit by removing the changes for specified commit and head pointer will be moved to new commit id.
|							|	if you have commits like c1,c2,c3,c4 and we want to rollback C3 commit changes. if we use revert this will
|							|	create a new commit C5 by removeing the changes for C3 commit only, this will not remove any other commit changes
|							|	like reset.
------------------------------------------------------------------------------------------------------------------------------------------------------------
|	git cherry-pick <commit_id>		|	this is used to pick a commit from one branch and move to other branch.
|							|	Let say a commit is accidently made to the wrong branch. You can switch to the correct branch and 
|							|	cherry-pick that commit from that wrong branch and commit to correct branch.
------------------------------------------------------------------------------------------------------------------------------------------------------------
| 	git rebase <branch_name>		|	this will merge the given branch changes into our current working branch.
------------------------------------------------------------------------------------------------------------------------------------------------------------
|	git fetch					|	this will take the latest changes from remote repo and download to temporary location in local. This will not
|							|	merge the lastest remote repo changes into our local repo.
------------------------------------------------------------------------------------------------------------------------------------------------------------
|	git pull					|	this will take the latest changes from remote repository and merge them into our local repository.
------------------------------------------------------------------------------------------------------------------------------------------------------------
|	git merge origin/main			|	this will merge the latest changes in your remote repository main branch into your local repository main branch.
------------------------------------------------------------------------------------------------------------------------------------------------------------
|git stash / git stash -u(untracked also)	|	this will saves your untacked and staged changes in a temporary location and make the working tree clean by removeing those changes from working directory.
|							|	Let say we did some changes in feature branch, before commiting these changes we are asked to work on some other branch. Now, we have to checkout to the other branch
|							|	But, we don't want to lose our changes done in this feature branch or we don't want to strat from begining again.
|							|	First, we will save all our changes using stash then we wil checkout to other branch and complete the work there.
|							|	once, the work completed in other branch we will checkout to our feature branch and start from where we left.
------------------------------------------------------------------------------------------------------------------------------------------------------------
|	git stash pop				|	this will completely removes our left over changes from temporary location and add them to working directory, So that we can start from where we left.
------------------------------------------------------------------------------------------------------------------------------------------------------------
|	git stash apply				|	this will not completely removes the changes from temporary location, instead it will take a copy of those changes and apply to our working location/tree.
|							|	this will be useful when we want to apply same set of stashed changes to multiple branches
------------------------------------------------------------------------------------------------------------------------------------------------------------